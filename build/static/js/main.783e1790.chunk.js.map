{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","personService","getAll","axios","get","then","response","data","addNew","newObject","post","removeName","id","delete","changeNumber","changedNameObject","console","log","put","Filter","props","value","onChange","PersonForm","onSubmit","nameInputValue","nameOnChange","numberInputValue","numberOnChange","type","Persons","name","number","onClick","Notification","message","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","filterValue","setFilterValue","notification","setNotification","useEffect","initialPersons","tulostettava","length","event","target","toUpperCase","filter","person","includes","preventDefault","some","element","window","confirm","oldNameObject","find","n","map","nameObject","setTimeout","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.783e1790.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst addNew = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst removeName = (id) =>  {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response =>response.data)\r\n}\r\n\r\nconst changeNumber = (changedNameObject) =>    {\r\n    console.log('terveiset personsista ', changedNameObject)\r\n    const request = axios.put(`${baseUrl}/${changedNameObject.id}`, changedNameObject)\r\n    \r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst personService = { getAll, addNew, removeName, changeNumber }\r\n\r\nexport default personService","\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nimport personService from './services/persons'\r\n\r\nimport './index.css'\r\n\r\nconst Filter = (props) => {\r\n  return (\r\n    <div>\r\n    filter: <input value={props.value}\r\n    onChange ={props.onChange} />\r\n  </div>\r\n  )\r\n}\r\n\r\nconst PersonForm = (props) => {\r\n  return (\r\n  <form onSubmit={props.onSubmit}>\r\n  <div>\r\n    name: <input value={props.nameInputValue} \r\n    onChange={props.nameOnChange}/>\r\n  </div>\r\n  <div>\r\n    number: <input value={props.numberInputValue}\r\n    onChange={props.numberOnChange}/>\r\n  </div>\r\n  <div>\r\n    <button type=\"submit\">add</button>\r\n  </div>\r\n</form>\r\n  )}\r\n\r\n  const Persons = (props) => {\r\n    return (\r\n    <div>\r\n      <p key={props.id} >{props.name} {props.number} \r\n      <button onClick={props.onClick}> delete </button></p>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  const Notification = ({message}) => {\r\n    console.log(message)\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"notification\">\r\n        {message}\r\n      </div>\r\n    )\r\n\r\n  }\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons] = useState([]) \r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ newFilter, setNewFilter ] = useState([])\r\n  const [ filterValue, setFilterValue ] = useState('')\r\n  const [ notification, setNotification ] = useState(null)\r\n\r\n  useEffect(() => {\r\n    personService\r\n      .getAll()\r\n      .then(initialPersons => {\r\n        setPersons(initialPersons)\r\n      })\r\n  }, [])\r\n\r\n  let tulostettava = []\r\n\r\n  const addNewName = (event) => {\r\n    event.preventDefault()\r\n\r\n    const alreadyAdded = (element) => element.name === newName\r\n      \r\n    if (persons.some(alreadyAdded) === true) {\r\n      if (window.confirm(`${newName} has already been added to phonebook, replace old number with new one`))  {\r\n        const oldNameObject = persons.find(n => n.name === newName)\r\n        \r\n        const changedNameObject = {...oldNameObject, number: newNumber }\r\n        personService\r\n        .changeNumber(changedNameObject) \r\n         .then( \r\n          response => {\r\n            tulostettava = persons.map(nameObject => nameObject.id !== changedNameObject.id ? nameObject : response)\r\n            setPersons(tulostettava)}\r\n          )\r\n          \r\n          setNotification(`${newName} has been given a new number`)\r\n          setTimeout(() => {\r\n            setNotification(null)\r\n          }, 2000)\r\n        }\r\n      }\r\n     \r\n      else  {\r\n        const nameObject = {\r\n          name: newName, number: newNumber\r\n        }\r\n        personService\r\n        .addNew(nameObject)\r\n        .then(response => {\r\n        setPersons(persons.concat(response))\r\n        setNewFilter(persons.concat(response))\r\n        setNewName('')\r\n        setNewNumber('')\r\n        setNotification(`Added ${nameObject.name} to phonebook`)\r\n        setTimeout(() => {\r\n          setNotification(null)\r\n        }, 2000)\r\n      })\r\n    }\r\n    setNewName('');\r\n    setNewNumber('')\r\n  }\r\n\r\n  const handleDeleteOf = (id, name) => {\r\n    if (window.confirm(`Delete ${name}`))    {\r\n    \r\n    personService\r\n    .removeName(id)\r\n    .then( () => {\r\n      setPersons(persons.filter(person => person.id !== id))\r\n      setNewFilter('')\r\n    })\r\n    setNotification(`Removed ${name} from phonebook`)\r\n        setTimeout(() => {\r\n          setNotification(null)\r\n        }, 2000)\r\n    }\r\n  }\r\n\r\n  const handleNameChange = (event) =>  {\r\n      setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value);\r\n  }\r\n\r\n  const handleFilterChange = (event) => {\r\n    console.log('handlefilter', persons)\r\n    console.log(persons[0].name)\r\n    let value = event.target.value.toUpperCase();\r\n    setNewFilter(persons.filter(person => person.name.toUpperCase().includes(value)))\r\n    setFilterValue(event.target.value)\r\n  }\r\n\r\n\r\n  if (newFilter.length === 0 && filterValue.length === 0) {\r\n    tulostettava = persons\r\n  } else if (newFilter.length === 0 && filterValue.length > 0) {\r\n    tulostettava = []\r\n  } else {\r\n    tulostettava = newFilter\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n        <Notification message={notification}/>\r\n        <Filter value={filterValue} onChange ={handleFilterChange}/>\r\n      <h2>Add new</h2>\r\n        <PersonForm onSubmit = {addNewName} nameInputValue ={newName}\r\n          nameOnChange = {handleNameChange} numberInputValue ={newNumber}\r\n          numberOnChange = {handleNumberChange}/>\r\n      <h2>Numbers</h2>\r\n      <div>\r\n      {\r\n      tulostettava.map(person => \r\n        <Persons key = {person.id} name = {person.name} number = {person.number} \r\n          onClick = {() => handleDeleteOf(person.id, person.name)} />)\r\n      } \r\n        \r\n      </div>  \r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}